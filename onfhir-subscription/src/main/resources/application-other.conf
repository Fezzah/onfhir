onfhir {
  # onFhir repo cluster hosts (seperated by comma if more than one)
  hosts = ["127.0.0.1:8081"]
  # If onfhir is secure, a shared secret key is needed to access internal api
  # internal-api-secret-key = ""
  subscription {
    kafka {
      # Kafka brokers (seperated by comma if more than one)
      bootstrap-servers = ["asel-kafka:9093", "asel-kafka:9094"]
      # Topic for fhir resources
      fhir-topic = "fhir"
      # Topic for parsed OnFhir subscription resource
      fhir-subscription-topic = "onfhir.subscription"
    }
    # Port to listen FHIR subscription web socket channel
    websocket.port = 8083
    ask-timeout = 60s
  }
}

akka {
  actor {
    provider = "cluster"
    #Serialization for distributed data
    serializers {
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      fhir-subscription-serializer = "io.onfhir.subscription.model.FhirSubscriptionProtoSerializer"
      criteria-subscription-serializer = "io.onfhir.subscription.model.CriteriaSubscriptionsProtoSerializer"
      search-param-conf-serializer = "io.onfhir.subscription.model.SearchParameterConfProtoSerializer"
    }
    serialization-bindings {
      "io.onfhir.subscription.model.DDFhirSubscription" = fhir-subscription-serializer
      "io.onfhir.subscription.model.CriteriaSubscriptions" = criteria-subscription-serializer
      "io.onfhir.subscription.model.SearchParameterConfWrapper" = search-param-conf-serializer
      "io.onfhir.subscription.model.CborSerializable" = "jackson-cbor"
    }
  }
  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2552
    }
  }

  cluster {
    seed-nodes = ["akka://onfhir-subscription@127.0.0.1:2551"]

    roles = []
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}